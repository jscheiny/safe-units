export interface CommonSpec {
    minExponent: number;
    maxExponent: number;
}

export interface CodeGenSpec extends CommonSpec {
    operators: PartialOperatorSpec[];
}

export interface PartialOperatorSpec {
    fileNamePrefix: string;
    uncurriedTypeNamePrefix: string;
    curriedTypeNamePrefix: string;
    testTypeNamePrefix: string;
    specialCases: { [left: number]: string };
    compute: (left: number, right: number) => number;
}

export interface OperatorSpec extends CommonSpec, PartialOperatorSpec {}

export function getExponents({ minExponent, maxExponent }: CommonSpec): number[] {
    const exponents: number[] = [];
    for (let exponent = minExponent; exponent <= maxExponent; exponent++) {
        exponents.push(exponent);
    }
    return exponents;
}

export function isExponent(exponent: number, { minExponent, maxExponent }: CommonSpec): boolean {
    return exponent >= minExponent && exponent <= maxExponent && exponent === Math.floor(exponent);
}

export function genFileHeader(disableTslint: boolean = true): string[] {
    const header = ["// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.", ""];
    if (disableTslint) {
        header.push("// tslint:disable", "");
    }
    return header;
}

interface ImportSpec {
    symbols: string[];
    source: string;
}

export function genImports(...imports: ImportSpec[]): string[] {
    imports.sort((first, second) => order(first.source, second.source));
    return imports.map(genImport);
}

function genImport({ symbols, source }: ImportSpec): string {
    symbols.sort(order);
    return `import { ${symbols.join(", ")} } from "${source}";`;
}

function order(first: string, second: string): number {
    if (first < second) {
        return -1;
    }
    if (first > second) {
        return 1;
    }
    return 0;
}

export function genUncurriedTypeName(spec: OperatorSpec, left?: string | number, right?: string | number): string {
    const args = left !== undefined && right !== undefined ? `<${left}, ${right}>` : "";
    return `${spec.uncurriedTypeNamePrefix}Exponents${args}`;
}

export function genValueName(value: number): string {
    if (value === 0) {
        return "0";
    }
    const sign = value < 0 ? "Negative" : "Positive";
    return `${sign}${Math.abs(value)}`;
}

export function indent(line: string): string {
    return "    " + line;
}
